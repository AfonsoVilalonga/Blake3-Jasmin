/*
    FUNCTIONS FOR THE blake3_hasher_finalize
    EXPORT FUNCTION blake3_hasher_finalize
    FUNCIONA
*/


/*
    COMPLETE 
*/
inline fn parent_output(reg u64 self, stack u32[8] current_cv, reg u8 parent_nodes) -> stack u32[8], 
                                stack u32[16], reg u64, reg u32, reg u32{
    stack u32[8] input_chaining_value;
    stack u32[16] block_words;
    reg u64 counter;
    reg u32 block_len, flags, aux;



    inline int i, j;
    for i = 0 to 8{
        input_chaining_value[i] = (u32)[self + i * 4 + 112];
    }

    reg u64 aux2;
    aux2 = (64u) parent_nodes;
    aux2 = aux2 * 32;    
    for i = 0 to 8{
        block_words[i] = (u32)[self + 8 * 4 + 112 + aux2 + i * 4];
    }

    j = 0;
    for i = 8 to 16{
        block_words[i] = current_cv[j];
        j = j + 1;
    }

    counter = 0;
    block_len = 64;
    aux = 1;
    aux = aux << 2;
    flags = (u32)[self + 1880 - 4];
    flags = aux | flags;

    return input_chaining_value, block_words, counter, block_len, flags; 
}


/*
    COMPLETE
*/
inline fn permute(stack u32[16] m) -> stack u32[16]{
    reg u64 aux;
    stack u64[16] MSG_PERMUTATION;
    MSG_PERMUTATION[0] = 2;
    MSG_PERMUTATION[1] = 6;
    MSG_PERMUTATION[2] = 3;
    MSG_PERMUTATION[3] = 10;
    MSG_PERMUTATION[4] = 7;
    MSG_PERMUTATION[5] = 0;
    MSG_PERMUTATION[6] = 4;
    MSG_PERMUTATION[7] = 13;
    MSG_PERMUTATION[8] = 1;
    MSG_PERMUTATION[9] = 11;
    MSG_PERMUTATION[10] = 12;
    MSG_PERMUTATION[11] = 5;
    MSG_PERMUTATION[12] = 9;
    MSG_PERMUTATION[13] = 14;
    MSG_PERMUTATION[14] = 15;
    MSG_PERMUTATION[15] = 8;

    stack u32[16] permuted;
    inline int i;
    for i = 0 to 16{
        aux = MSG_PERMUTATION[i];
        permuted[i] = m[(int) aux];
    }

    for i = 0 to 16{
        m[i] = permuted[i];
    }

    return m; 
}


/*
    COMPLETE
*/
inline fn rotate_right(reg u32 x, inline int n) -> reg u32{
    reg u32 aux, aux2, aux3, res;
    
    aux = x;
    aux = aux >> n;

    aux3 = 32;
    aux3 = aux3 - n;
    aux2 = x;
    aux2 = aux2 << aux3;

    res = aux;
    res = res | aux2;

    return res; 
}


/*
   COMPLETE
*/
inline fn g(stack u32[16] state, reg u64 a b c d, reg u32 mx my) -> stack u32[16]{
    reg u32 aux; 

    aux = state[(int) a];
    aux = aux + state[(int) b]; 
    aux = aux + mx;
    state[(int) a] = aux;
    
    aux = state[(int) a];
    aux = aux ^ state[(int) d];
    aux = rotate_right(aux, 16);
    state[(int) d] = aux;

    aux = state[(int) c];
    aux = aux + state[(int) d];
    state[(int) c] = aux;
        
    aux = state[(int) b];
    aux = aux ^ state[(int) c];
    aux = rotate_right(aux, 12);
    state[(int) b] = aux;

    aux = state[(int) a];
    aux = aux + state[(int) b];
    aux = aux + my;
    state[(int) a] = aux;
    
    aux = state[(int) d];
    aux = aux ^ state[(int) a];
    aux = rotate_right(aux, 8);
    state[(int) d] = aux;

    aux = state[(int) c];
    aux = aux + state[(int) d];
    state[(int) c] = aux; 

    aux = state[(int) b];
    aux = aux ^ state[(int) c];
    aux = rotate_right(aux, 7); 
    state[(int) b] = aux;
    
    return state;
}


/*
   COMPLETE
*/
inline fn round_function(stack u32[16] state, stack u32[16] m) -> stack u32[16]{
    reg u64 a, b, c, d;
    reg u32 aux, aux2;
    stack u32[16] state_aux;
    

    aux = m[0];
    aux2 = m[1];
    a = 0;
    b = 4; 
    c = 8;
    d = 12;
    state_aux = g(state, a, b, c, d, aux, aux2);
    
    aux = m[2];
    aux2 = m[3];
    a = 1;
    b = 5; 
    c = 9;
    d = 13;
    state_aux = g(state_aux, a, b, c, d, aux, aux2);

    aux = m[4];
    aux2 = m[5];
    a = 2;
    b = 6; 
    c = 10;
    d = 14;
    state_aux = g(state_aux, a, b, c, d, aux, aux2);

    aux = m[6];
    aux2 = m[7];
    a = 3;
    b = 7; 
    c = 11;
    d = 15;
    state_aux = g(state_aux, a, b, c, d, aux, aux2);

    aux = m[8];
    aux2 = m[9];
    a = 0;
    b = 5; 
    c = 10;
    d = 15;
    state_aux = g(state_aux, a, b, c, d, aux, aux2);

    aux = m[10];
    aux2 = m[11];
    a = 1;
    b = 6; 
    c = 11;
    d = 12;
    state_aux = g(state_aux, a, b, c, d, aux, aux2);

    aux = m[12];
    aux2 = m[13];
    a = 2;
    b = 7; 
    c = 8;
    d = 13;
    state_aux = g(state_aux, a, b, c, d, aux, aux2);

    aux = m[14];
    aux2 = m[15];
    a = 3;
    b = 4; 
    c = 9;
    d = 14;
    state_aux = g(state_aux, a, b, c, d, aux, aux2);

    return state_aux;
}


/*
    COMPLETE
*/
inline fn compress(stack u32[8] chaining_value, stack u32[16] block_words, reg u64 counter,
                    reg u32 block_len, reg u32 flags) -> stack u32[16] {
    stack u32[16] state;
    stack u32[16] block;
    stack u32[16] out;

    reg u64 aux; 
    aux = counter;
    aux = aux >> 32;

    state[0] = chaining_value[0];
    state[1] = chaining_value[1];
    state[2] = chaining_value[2];
    state[3] = chaining_value[3];
    state[4] = chaining_value[4];
    state[5] = chaining_value[5];
    state[6] = chaining_value[6];
    state[7] = chaining_value[7];
    state[8] = 0x6A09E667;
    state[9] = 0xBB67AE85;
    state[10] = 0x3C6EF372;
    state[11] = 0xA54FF53A;
    state[12] = (32u) counter;
    state[13] = (32u) (aux);
    state[14] = block_len;
    state[15] = flags;

    inline int i;
    for i = 0 to 16{
        block[i] = block_words[i];
    }     

    state = round_function(state, block);
    block = permute(block);
    state = round_function(state, block);
    block = permute(block);
    state = round_function(state, block);
    block = permute(block);
    state = round_function(state, block);
    block = permute(block);
    state = round_function(state, block);
    block = permute(block);
    state = round_function(state, block);
    block = permute(block);
    state = round_function(state, block);

    reg u32 aux2;
    for i = 0 to 8{
        aux2 = state[i + 8];
        state[i] = state[i] ^ aux2;
        
        aux2 = chaining_value[i];
        state[i + 8] = state[i + 8] ^ aux2;
    }
    
    for i = 0 to 16{
        out[i] = state[i];
    }
   
    return out;
}


/*
    COMPLETE
*/
inline fn output_chaining_value(reg u64 counter, reg u32 block_len_out flags, stack u32[16] block_words, 
                                    stack u32[8] input_chaining_value) -> stack u32[8]{

    stack u32[16] out16;
    stack u32[8] out;
    out16 = compress(input_chaining_value, block_words, counter, block_len_out, flags);

    inline int i;
    for i = 0 to 8{
        out[i] = out16[i];
    }

    return out;
}    


/*
    COMPLETE
*/
inline fn words_from_little_endian_bytes(reg u64 self) -> stack u32[16]{
    stack u32[16] res;

    reg u32 aux;

    inline int i;
    inline int j;
    j = 0;

    for i = 0 to 16{
        aux = (32u) (u8)[self + 40 + j];
        res[i] = aux;
        j += 1;
        
        aux = (32u) (u8)[self + 40 + j];
        aux = aux << 8;
        res[i] += aux;
        j += 1;
        
        aux = (32u) (u8)[self + 40 + j];
        aux = aux << 16;
        res[i] += aux;
        j += 1;
        
        aux = (32u) (u8)[self + 40 + j];
        aux = aux << 24;
        res[i] += aux;
        j += 1;
    }

    return res;
}


/*
    COMPLETE
*/
inline fn chunk_state_start_flag(reg u64 self) -> reg u32{
    reg u32 res;

    if((u8) [self + 105] == 0){
        res = 1;
        res = res << 0;
    }else{
        res = 0;
    }
    
    return res;
}


/* 
    COMPLETE
*/
inline fn chunk_state_output(reg u64 self) -> reg u64, reg u32, reg u32, stack u32[16], stack u32[8]{
    reg u64 counter;
    reg u32 block_len, flags, aux;
    stack u32[16] block_words;
    stack u32[8] input_chaining_value;

    inline int i;
    for i = 0 to 8{
        input_chaining_value[i] = (u32)[self + 4 * i]; 
    }
    
    block_words = words_from_little_endian_bytes(self);

    counter = (u64)[self + 4 * 8];
    
    block_len = (32u) (u8)[self + 5 * 8 + 64];
    
    flags = (u32)[self + 108];
    aux = chunk_state_start_flag(self);
    flags = flags | aux;
    aux = 1;
    aux = aux << 1;
    flags = flags | aux;

    return counter, block_len, flags, block_words, input_chaining_value;
}


/*
    COMPLETE
*/
inline fn output_root_bytes(reg u64 counter, reg u32 block_len flags, stack u32[16] block_words, stack u32[8] input_chaining_value, 
                                reg u64 out, reg u64 out_size){
    reg u32 aux, aux2, a, b;
    stack u32[16] words;
    reg u64 output_block_counter;
    output_block_counter = 0;

    aux2 = 1; 
    aux2 = aux2 << 3;
    
    inline int word;
    inline int byte;
    reg u64 index;
    index = 0;

    while(out_size >s 0){
        aux = flags;
        aux = aux | aux2;
        words = compress(input_chaining_value, block_words, output_block_counter, block_len, aux);

        
        for word = 0 to 16{
            for byte = 0 to 4{
                
                if (out_size >s 0) {
                    a = words[word];
                    b = 8;
                    b = b * byte;
                    a = a >> b;

                    (u8)[out + (int) index] = a;
                    
                    index = index + 1;
                }
                out_size = out_size - 1;
            }
        }
        
        output_block_counter = output_block_counter + 1;
    }
}


/*
    COMPLETE
*/
export fn blake3_hasher_finalize(reg u64 self, reg u64 out, reg u64 size){
    reg u64 counter;
    reg u32 block_len, flags;
    reg u8 parent_nodes_remaining;
    
    stack u32[16] block_words;
    stack u32[8] input_chaining_value;
    stack u32[8] current_cv;

    counter, block_len, flags, block_words, input_chaining_value = chunk_state_output(self);
    parent_nodes_remaining = (u8)[self + 108 + 4 + (8*4) + (8*54)*4];
    
    while(parent_nodes_remaining > 0){
        parent_nodes_remaining = parent_nodes_remaining - 1;
        current_cv = output_chaining_value(counter, block_len, flags, block_words, input_chaining_value);
        
        input_chaining_value, block_words, counter, block_len, flags = parent_output(self, current_cv, parent_nodes_remaining);
    }

    output_root_bytes(counter, block_len, flags, block_words, input_chaining_value, out, size);   
}





   
/*
    FUNCTIONS FOR THE blake3_hasher_update
    EXPORT FUNCTION blake3_hasher_update
    NAO FUNCIONA REVER
*/






/*
    COMPLETE
*/
inline fn chunk_state_len(reg u64 self) -> reg u64{
    reg u64 res, blocks_compressed, block_len;

    blocks_compressed = (64u) (u8)[self + 105];
    block_len = (64u) (u8)[self + 104];

    res = 64;
    res *= blocks_compressed;
    res += block_len;

    return res;
}


/*
    COMPLETE
*/
inline fn hasher_push_stack(reg u64 self, stack u32[8] cv){
    inline int i;
    
    reg u64 index;
    
    index = (64u) (u8)[self + 112 + 8 * 4 + (8 * 54) * 4];
    index = index * 32;

    for i = 0 to 8{
        (u32)[self + 112 + 8 * 4 + index + 4 * i] = cv[i];
    }

    (u8)[self + 112 + 8*4 + (8 * 54) * 4] += 1;
}


/*
    COMPLETE 
*/
inline fn parent_cv(reg u64 self, stack u32[8] right_child_cv) -> stack u32[8]{
    stack u32[8] out, input_chaining_value;
    stack u32[16] block_words;
    
    reg u64 counter;
    reg u32 block_len, flags;
    reg u8 aux;

    aux = (u8)[self + 112 + (8 * 4) + (8 * 54) * 4];
    input_chaining_value, block_words, counter, block_len, flags = parent_output(self, right_child_cv, aux);

    out = output_chaining_value(counter, block_len, flags, block_words, input_chaining_value);    

    return out;    
}



/*
    COMPLETE  
*/
inline fn hasher_add_chunk_cv(reg u64 self, stack u32[8] new_cv, reg u64 total_chunks){
    stack u32[8] out;
    reg u64 aux, condition;
    
    out = new_cv;

    condition = total_chunks;
    aux = condition; 
    aux = aux & 1;
    
    while(aux == 0){
        (u8)[self + 1872] -= 1;

        out = parent_cv(self, out);    

        condition = condition >> 1;
        
        aux = condition; 
        aux = aux & 1;
    }

    hasher_push_stack(self, out);
}


/*
    COMPLETE 
*/
inline fn chunk_state_init_update(reg u64 self, reg u64 chunck_counter){
    inline int i;
    for i = 0 to 8{
        (u32)[self + i * 4] = (u32)[self + 112 + i * 4];
    }   

    (u64)[self + 8 * 4] = chunck_counter;
    
    for i = 0 to 64{
        (u8)[self + 8 * 5 + i] = 0;
    }
    
    (u8)[self + 8 * 5 + 64] = 0;
    (u8)[self + 8 * 5 + 65] = 0;
    (u32)[self + 112 - 4] = (u32)[self + 1880 - 4];
}


/* 
    COMPLETE 
*/
inline fn chunk_state_update(reg u64 self, reg u64 input, reg u64 input_len, stack u64 pt){
    stack u32[16] out16;
    stack u32[16] block_words;
    stack u32[8] chaining_value;

    reg u8 block_len;
    reg u64 chunck_counter, take, want, input_u8, counter, aux, aux2, input_len_aux;
    
    input_u8 = pt;
    input_len_aux = input_len;

    reg u32 flags, aux32;
    
    reg u32 BLAKE3_BLOCK_LEN;
    BLAKE3_BLOCK_LEN = 64;

    while(input_len_aux >s 0){
        block_len = (u8)[self + 8 * 5 + 64];

        if(block_len == BLAKE3_BLOCK_LEN){
            block_words = words_from_little_endian_bytes(self);

            inline int i;
            for i = 0 to 8{
                chaining_value[i] = (u32)[self + i * 4];
            }

            chunck_counter = (u64)[self + 8 * 4];
            aux32 = chunk_state_start_flag(self);
            flags = (u32)[self + 108];
            flags = flags | aux32;
            out16 = compress(chaining_value, block_words, chunck_counter, BLAKE3_BLOCK_LEN, flags);

            for i = 0 to 8{
                (u32)[self + i * 4] = out16[i]; 
            }

            (u8)[self + 8 * 5 + 64 + 1] += 1;

            for i = 0 to 64{
                (u8)[self + 8 * 5 + i] = 0;
            }

            (u8)[self + 8 * 5 + 64] = 0;
        }   

        want = (64u) BLAKE3_BLOCK_LEN;
        aux = (64u)(u8)[self + 5 * 8 + 64];
        want = want - aux;
        take = want;

        if(input_len_aux <s want){
            take = input_len_aux;
        }

        
        counter = 0;
        block_len = (u8)[self + 8*5 + 64];

        aux = (64u)block_len;
        aux2 = (64u)input_u8;

        while(counter <s take){
            (u8)[self + 5 * 8 + aux] = (u8)[input + aux2];
            counter = counter + 1;

            aux = aux + 1;
            aux2 = aux2 + 1;
        }

        (u8)[self + 5 * 8 + 64] += (8u) take;
        input_u8 += take;
        input_len_aux -= take;
    }
}


/* 
    COMPLETE
*/
export fn blake3_hasher_update(reg u64 self, reg u64 input, reg u64 input_len){
    stack u32[16] block_words;
    stack u32[8] input_chaining_value;
    stack u32[8] chunck_cv;
    
    reg u64 counter, total_chunks, take, want, aux64;
    reg u32 block_len, flags;
    
    stack u64 input_u8;
    input_u8 = 0;

    stack u64 BLAKE3_CHUNK_LEN;
    BLAKE3_CHUNK_LEN = 1024;


    while(input_len >s 0){
        aux64 = chunk_state_len(self);
        
        if(aux64 == BLAKE3_CHUNK_LEN){
            counter, block_len, flags, block_words, input_chaining_value = chunk_state_output(self);
            chunck_cv = output_chaining_value(counter, block_len, flags, block_words, input_chaining_value);
        
            total_chunks = (u64)[self + 8 * 4];
            total_chunks += 1;

            hasher_add_chunk_cv(self, chunck_cv, total_chunks);
            chunk_state_init_update(self, total_chunks);
        }
        
        aux64 = BLAKE3_CHUNK_LEN;
        want = chunk_state_len(self);
        want = aux64 - want;
        take = want;

        if(input_len <s want){
            take = input_len;
        }

        chunk_state_update(self, input, take, input_u8);
        input_u8 += take;
        input_len -= take;
    }

}






/*
    FUNCTIONS FOR THE blake3_hasher_init, 
        blake3_hasher_init_keyed and blake3_hasher_init_derive_key
    EXPORT FUNCTION blake3_hasher_init,
         blake3_hasher_init_keyed and blake3_hasher_init_derive_key
*/






/*
    COMPLETE
*/
inline fn words_from_little_endian_bytes_init(stack u8[32] key) -> stack u32[8]{
    stack u32[8] res;

    reg u32 aux;

    inline int i;
    inline int j;
    j = 0;

    for i = 0 to 8{
        aux = (32u) key[j];
        res[i] = aux;
        j += 1;
        
        aux = (32u) key[j];
        aux = aux << 8;
        res[i] += aux;
        j += 1;
        
        aux = (32u) key[j];
        aux = aux << 16;
        res[i] += aux;
        j += 1;
        
        aux = (32u) key[j];
        aux = aux << 24;
        res[i] += aux;
        j += 1;
    }

    return res;
}


/*
    COMPLETE
*/
inline fn chunk_state_init_key(reg u64 self, stack u32[8] key_words, reg u64 chunk_counter, stack u32 flags){
    inline int i;
    for i = 0 to 8{
        (u32)[self + i * 4] = key_words[i];
    }   

    (u64)[self + 8 * 4] = chunk_counter;
    
    for i = 0 to 64{
        (u8)[self + 8 * 5 + i] = 0;
    }
    
    (u8)[self + 8 * 5 + 64] = 0;
    (u8)[self + 8 * 5 + 65] = 0;
    (u32)[self + 112 - 4] = flags;
}


/*
    COMPLETE
*/
inline fn hasher_init_internal(reg u64 self, stack u32[8] key_words, stack u32 flags){
    reg u64 chunck_counter;
    chunck_counter = 0;

    chunk_state_init_key(self, key_words, chunck_counter, flags);

    inline int i;
    for i = 0 to 8{
        (u32)[self + 112 + 4 * i] = key_words[i];
    }

    (u8)[self + 112 + 4 * 8 + (8 * 54) * 4] = 0;
    (u32)[self + 1880 - 4] = flags;

}


/*
    COMPLETE
*/
export fn blake3_hasher_init(reg u64 self){
    stack u32 flags;
    flags = 0;

    stack u32[8] IV; 
    IV[0] = 0x6A09E667;
    IV[1] = 0xBB67AE85;
    IV[2] = 0x3C6EF372;
    IV[3] = 0xA54FF53A;
    IV[4] = 0x510E527F;
    IV[5] = 0x9B05688C;
    IV[6] = 0x1F83D9AB;
    IV[7] = 0x5BE0CD19;

    hasher_init_internal(self, IV, flags);
}


/*
    COMPLETE
*/
export fn blake3_hasher_init_keyed(reg u64 self, reg u64 key){
    stack u8[32] key_aux;
    stack u32[8] key_words;
    
    stack u32 keyed_hash;
    
    keyed_hash = 1;
    keyed_hash = keyed_hash << 4;

    inline int i; 
    for i = 0 to 32{
        key_aux[i] = (u8)[key + i];
    }

    key_words = words_from_little_endian_bytes_init(key_aux);
    hasher_init_internal(self, key_words, keyed_hash);
}


/* 
    COMPLETE
*/
inline fn blake3_hasher_update_inline(reg u64 self, reg u64 input, stack u64 input_len){
    stack u32[16] block_words;
    stack u32[8] input_chaining_value;
    stack u32[8] chunck_cv;
    
    reg u64 counter, total_chunks, take, want, aux64;
    reg u32 block_len, flags;
    
    stack u64 input_u8;
    input_u8 = 0;

    stack u64 BLAKE3_CHUNK_LEN;
    BLAKE3_CHUNK_LEN = 1024;


    while(input_len >s 0){
        aux64 = chunk_state_len(self);
        
        if(aux64 == BLAKE3_CHUNK_LEN){
            counter, block_len, flags, block_words, input_chaining_value = chunk_state_output(self);
            chunck_cv = output_chaining_value(counter, block_len, flags, block_words, input_chaining_value);
        
            total_chunks = (u64)[self + 8 * 4];
            total_chunks += 1;

            hasher_add_chunk_cv(self, chunck_cv, total_chunks);
            chunk_state_init_update(self, total_chunks);
        }
        
        aux64 = BLAKE3_CHUNK_LEN;
        want = chunk_state_len(self);
        want = aux64 - want;
        take = want;

        if(input_len <s want){
            take = input_len;
        }

        chunk_state_update(self, input, take, input_u8);
        input_u8 += take;
        input_len -= take;
    }

}


/*
    COMPLETE
*/
inline fn output_root_bytes_inline(reg u64 counter, reg u32 block_len flags, stack u32[16] block_words, stack u32[8] input_chaining_value, 
                                        stack u64 out_s) -> stack u8[32]{
    reg u32 aux, aux2, a, b;
    stack u32[16] words;
    reg u64 output_block_counter;
    output_block_counter = 0;

    aux2 = 1; 
    aux2 = aux2 << 3;
    
    inline int word;
    inline int byte;
    reg u64 index;
    index = 0;

    stack u8[32] context_key;

    reg u64 out_size;
    out_size = out_s;

    while(out_size >s 0){
        aux = flags;
        aux = aux | aux2;
        words = compress(input_chaining_value, block_words, output_block_counter, block_len, aux);

        
        for word = 0 to 16{
            for byte = 0 to 4{
                
                if (out_size >s 0) {
                    a = words[word];
                    b = 8;
                    b = b * byte;
                    a = a >> b;

                    context_key[(int) index] = a;
                    
                    index = index + 1;
                }
                out_size = out_size - 1;
            }
        }
        
        output_block_counter = output_block_counter + 1;
    }

    return context_key;
}


/*
    COMPLETE
*/
inline fn blake3_hasher_finalize_inline(reg u64 self, stack u64 size) -> stack u8[32]{
    reg u64 counter;
    reg u32 block_len, flags;
    reg u8 parent_nodes_remaining;
    
    stack u32[16] block_words;
    stack u32[8] input_chaining_value;
    stack u32[8] current_cv;
    stack u8[32] context_key;

    counter, block_len, flags, block_words, input_chaining_value = chunk_state_output(self);
    parent_nodes_remaining = (u8)[self + 108 + 4 + (8*4) + (8*54)*4];
    
    while(parent_nodes_remaining > 0){
        parent_nodes_remaining = parent_nodes_remaining - 1;
        current_cv = output_chaining_value(counter, block_len, flags, block_words, input_chaining_value);
        
        input_chaining_value, block_words, counter, block_len, flags = parent_output(self, current_cv, parent_nodes_remaining);
    }

    context_key = output_root_bytes_inline(counter, block_len, flags, block_words, input_chaining_value, size);  
    return context_key; 
}


/*
    COMPLETE
*/
export fn blake3_hasher_init_derive_keya(reg u64 context_hasher, reg u64 self, reg u64 context, reg u64 context_len){
    stack u8[32] context_key;
    stack u32[8] context_key_words;
    
    stack u64 context_len_aux;
    context_len_aux = context_len;

    stack u32[8] IV; 
    IV[0] = 0x6A09E667;
    IV[1] = 0xBB67AE85;
    IV[2] = 0x3C6EF372;
    IV[3] = 0xA54FF53A;
    IV[4] = 0x510E527F;
    IV[5] = 0x9B05688C;
    IV[6] = 0x1F83D9AB;
    IV[7] = 0x5BE0CD19;

    stack u32 DERIVE_KEY_CONTEXT, DERIVE_KEY_MATERIAL;
    stack u64 BLAKE3_KEY_LEN;

    DERIVE_KEY_MATERIAL = 1; 
    DERIVE_KEY_MATERIAL = DERIVE_KEY_MATERIAL << 6;
    DERIVE_KEY_CONTEXT = 1;
    DERIVE_KEY_CONTEXT = DERIVE_KEY_CONTEXT << 5;
    BLAKE3_KEY_LEN = 32;

    hasher_init_internal(context_hasher, IV, DERIVE_KEY_CONTEXT);
    blake3_hasher_update_inline(context_hasher, context, context_len_aux);
    context_key = blake3_hasher_finalize_inline(context_hasher, BLAKE3_KEY_LEN);

    context_key_words = words_from_little_endian_bytes_init(context_key);
    
    hasher_init_internal(self, context_key_words, DERIVE_KEY_MATERIAL);

}






